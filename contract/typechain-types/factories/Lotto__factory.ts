/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Lotto, LottoInterface } from "../Lotto";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "numbers",
        type: "uint256[]",
      },
    ],
    name: "play",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052606444426100129190610027565b61001c9190610087565b600181905550610116565b60006100328261007d565b915061003d8361007d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610072576100716100b8565b5b828201905092915050565b6000819050919050565b60006100928261007d565b915061009d8361007d565b9250826100ad576100ac6100e7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610715806101256000396000f3fe60806040526004361061001e5760003560e01c8063212c84d514610023575b600080fd5b61003d6004803603810190610038919061034c565b61003f565b005b6100488161004b565b50565b600681511461008f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161008690610436565b60405180910390fd5b60005b815181101561017f5760018282815181106100d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101511015801561012d57506032828281518110610122577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015111155b61016c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610163906103f6565b60405180910390fd5b808061017790610549565b915050610092565b506101898161018c565b50565b60005b815181101561029d5760006001826101a791906104b8565b90505b8251811015610289578281815181106101ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015183838151811061022d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101511415610276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026d90610416565b60405180910390fd5b808061028190610549565b9150506101aa565b50808061029590610549565b91505061018f565b5050565b60006102b46102af8461047b565b610456565b905080838252602082019050828560208602820111156102d357600080fd5b60005b8581101561030357816102e98882610337565b8452602084019350602083019250506001810190506102d6565b5050509392505050565b600082601f83011261031e57600080fd5b813561032e8482602086016102a1565b91505092915050565b600081359050610346816106c8565b92915050565b60006020828403121561035e57600080fd5b600082013567ffffffffffffffff81111561037857600080fd5b6103848482850161030d565b91505092915050565b600061039a6029836104a7565b91506103a582610601565b604082019050919050565b60006103bd6028836104a7565b91506103c882610650565b604082019050919050565b60006103e0601e836104a7565b91506103eb8261069f565b602082019050919050565b6000602082019050818103600083015261040f8161038d565b9050919050565b6000602082019050818103600083015261042f816103b0565b9050919050565b6000602082019050818103600083015261044f816103d3565b9050919050565b6000610460610471565b905061046c8282610518565b919050565b6000604051905090565b600067ffffffffffffffff821115610496576104956105c1565b5b602082029050602081019050919050565b600082825260208201905092915050565b60006104c38261050e565b91506104ce8361050e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561050357610502610592565b5b828201905092915050565b6000819050919050565b610521826105f0565b810181811067ffffffffffffffff821117156105405761053f6105c1565b5b80604052505050565b60006105548261050e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561058757610586610592565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f6e756d62657273206d757374206265206265747765656e205b312c2035305d2060008201527f696e636c75736976650000000000000000000000000000000000000000000000602082015250565b7f74686520696e7075742063616e6e6f742068617665206475706c69636174652060008201527f656e74726965732e000000000000000000000000000000000000000000000000602082015250565b7f6c6f74746f206d7573742068617665206f6e6c792036206e756d626572730000600082015250565b6106d18161050e565b81146106dc57600080fd5b5056fea26469706673582212201acaab90dd3149e664b9032211079cba77a998712238c9f15bde73b251414a7964736f6c63430008040033";

type LottoConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LottoConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lotto__factory extends ContractFactory {
  constructor(...args: LottoConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<Lotto> {
    return super.deploy(overrides || {}) as Promise<Lotto>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Lotto {
    return super.attach(address) as Lotto;
  }
  override connect(signer: Signer): Lotto__factory {
    return super.connect(signer) as Lotto__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LottoInterface {
    return new utils.Interface(_abi) as LottoInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Lotto {
    return new Contract(address, _abi, signerOrProvider) as Lotto;
  }
}
